<?xml version="1.1" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">
    
    <!--
        catalogName="${POSTGRES_CATALOG}" schemaName="${POSTGRES_SCHEMA}" 
        baseTableCatalogName="${POSTGRES_CATALOG}" baseTableSchemaName="${POSTGRES_SCHEMA}" referencedTableCatalogName="${POSTGRES_CATALOG}" referencedTableSchemaName="${POSTGRES_SCHEMA}" 
    -->

    <!-- This ChangeLog contains the changeset(s) to generate the table APP_ROLE_API_SCOPE
         It includes attributes, constraints, keys, indexes and security in one
         place. Where possible (i.e. where dependencies between subsequent changes 
         allow) updates to this table should be included as additional changesets
         within this changelog -->

    <!-- Changsets -->
    <changeSet author="Carol Geisler" id="CRTTAB_APRLAPSC_1_0">
        <createTable catalogName="${POSTGRES_CATALOG}" schemaName="${POSTGRES_SCHEMA}" tableName="app_role_api_scope" 
        	remarks="APP_ROLE_API_SCOPE is an XREF table that captures the relationshp between Roles and API scopes.">
            <column name="app_role_api_scope_id" type="UUID">
                <constraints nullable="false"/>
            </column>
            <column name="app_role_id" type="UUID">
                <constraints nullable="false"/>
            </column>
            <column name="api_scope_id" type="UUID">
                <constraints nullable="false"/>
            </column>
            <column name="created_by" type="VARCHAR(32)">
                <constraints nullable="false"/>
            </column>
            <column name="updated_by" type="VARCHAR(32)">
                <constraints nullable="false"/>
            </column>
            <column name="created_dtm" type="TIMESTAMP WITH TIME ZONE">
                <constraints nullable="false"/>
            </column>
            <column name="updated_dtm" type="TIMESTAMP WITH TIME ZONE">
                <constraints nullable="false"/>
            </column>
            <column name="revision_count" type="numeric(10)">
                <constraints nullable="false"/>
            </column>
        </createTable>
        <addPrimaryKey catalogName="${POSTGRES_CATALOG}" schemaName="${POSTGRES_SCHEMA}" tableName="app_role_api_scope" columnNames="app_role_api_scope_id" constraintName="pk_aprlapsc"/>
        <addForeignKeyConstraint baseTableCatalogName="${POSTGRES_CATALOG}" baseTableSchemaName="${POSTGRES_SCHEMA}" baseTableName="app_role_api_scope" baseColumnNames="api_scope_id" constraintName="fk_aprlapsc_apsc" deferrable="false" initiallyDeferred="false" onDelete="NO ACTION" onUpdate="NO ACTION" referencedTableCatalogName="${POSTGRES_CATALOG}" referencedTableSchemaName="${POSTGRES_SCHEMA}" referencedTableName="api_scope" referencedColumnNames="api_scope_id"/>
        <addForeignKeyConstraint baseTableCatalogName="${POSTGRES_CATALOG}" baseTableSchemaName="${POSTGRES_SCHEMA}" baseTableName="app_role_api_scope" baseColumnNames="app_role_id" constraintName="fk_aprlapsc_aprl" deferrable="false" initiallyDeferred="false" onDelete="NO ACTION" onUpdate="NO ACTION" referencedTableCatalogName="${POSTGRES_CATALOG}" referencedTableSchemaName="${POSTGRES_SCHEMA}" referencedTableName="app_role" referencedColumnNames="app_role_id"/>
        <sql>
        	GRANT SELECT ON ${POSTGRES_SCHEMA}.app_role_api_scope to ${POSTGRES_APP_USER};
        </sql>
        <rollback>
          <dropTable catalogName="${POSTGRES_CATALOG}" schemaName="${POSTGRES_SCHEMA}" tableName="app_role_api_scope"/>
        </rollback>
    </changeSet>
    
    <changeSet author="Carol Geisler" id="ADDTRG_aprlapsc_stamp">
      <sql>
        BEGIN;
        	DROP TRIGGER IF EXISTS trg_biu_aprlapsc_stamp ON ${POSTGRES_SCHEMA}.app_role_api_scope;
        	CREATE TRIGGER trg_biu_aprlapsc_stamp BEFORE INSERT OR UPDATE ON ${POSTGRES_SCHEMA}.app_role_api_scope
	            FOR EACH ROW EXECUTE PROCEDURE ${POSTGRES_SCHEMA}.tab_stamp();
        COMMIT;
      </sql>
      <rollback>
        <sql>
          BEGIN;
          	DROP TRIGGER IF EXISTS trg_biu_aprlapsc_stamp ON ${POSTGRES_SCHEMA}.app_role_api_scope;
          COMMIT;
        </sql>
      </rollback>
    </changeSet>

</databaseChangeLog>
